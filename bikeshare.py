# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A3tJunW52a5uNOBR9ZkE_Uwd4gkHTsAC
"""

import time
import pandas as pd
import numpy as np

#Global Variables
CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
months=["january", "february", "march", "april", "may", "june"]
days=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]

#for displaying columns in one raw without end-lines
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.expand_frame_repr', False)

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """

    print('Hello! Let\'s explore some US bikeshare data!')

    # get user input for city (chicago, new york city, washington).
    city=""
    while city not in ['chicago', 'new york city', 'washington']:
        city=input("Would you like to see data from chicago, new york city, washington?").lower()
    
    # get user input for day and month 
    day=None
    month=None
    while day is None and month is None: 
      dayint = -1
      filter=input("would you like to filter the data by month, day, both or not at all? Type 'none' for no time filter.").lower()

      if filter == "none":
        month="all"
        day="all"

      elif filter=="both":
        while month not in months:          #check month is available
          month=input("which month? January, February, March, April, May, or June?").lower()
        while dayint < 0 or dayint>7:       #check day is available
          try:
            dayint =int(input("which day? please enter your response as integer (e.g., 1=sunday"))
          except:
            print("Wrong input, please enter an integer")  #Handeling string inputs    
        day=days[dayint-1]

      elif filter=="month":
        day="all"
        while month not in months:
          month=input("which month? January, February, March, April, May, or June?").lower()

      elif filter=="day":
        month="all"
        while dayint < 0 or dayint>7:
          try:
            dayint =int(input("which day? please enter your response as integer (e.g., 1=sunday)"))
          except:
            print("Wrong input, please enter an integer")
        day=days[dayint-1]

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.DataFrame(data=pd.read_csv(CITY_DATA[city]))
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    
    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()


    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        month = months.index(month)+1

        # filter by month to create the new dataframe
        df = df[df['month']==month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week']==day.capitalize()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    print("the most common month is: ",months[df['month'].mode()[0]-1],". Number of occurrences: ",df["month"].value_counts()[df['month'].mode()[0]])


    #display the most common day of week
    print("the most common day of week is: ",df['day_of_week'].mode()[0],". Number of occurrences: ",df["day_of_week"].value_counts()[df['day_of_week'].mode()[0]])


    #display the most common start hour
    print("the most common start hour is: ",df['Start Time'].dt.hour.mode()[0],". Number of occurrences: ",df["Start Time"].value_counts()[df['Start Time'].mode()[0]])


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    print("the most commonly used start station is: ",df['Start Station'].mode()[0],". Number of occurrences: ",df["Start Station"].value_counts()[df['Start Station'].mode()[0]])


    # display most commonly used end station
    print("the most commonly used end station is: ",df['End Station'].mode()[0],". Number of occurrences: ",df["End Station"].value_counts()[df['End Station'].mode()[0]])

    # display most frequent combination of start station and end station trip
    print("the most frequent combination of start station and end station trip: ",(df['Start Station']+' and '+df['End Station']).mode()[0],". Number of occurrences: ",df.groupby(['Start Station', 'End Station']).size().max())


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    seconds_in_day = 60 * 60 * 24
    seconds_in_hour = 60 * 60
    seconds_in_minute = 60

    #Convert from seconds to days, hours, minutes
    seconds=float(df['Trip Duration'].sum())
    days = int(seconds // seconds_in_day)
    hours = int((seconds - (days * seconds_in_day)) // seconds_in_hour)
    minutes = int((seconds - (days * seconds_in_day) - (hours * seconds_in_hour))) // seconds_in_minute

    # display total travel time
    print("total travel time: days=",days,"hours=",hours,"min=",minutes)

    seconds=float(df['Trip Duration'].mean())
    days = int(seconds // seconds_in_day)
    hours = int((seconds - (days * seconds_in_day)) // seconds_in_hour)
    minutes = int((seconds - (days * seconds_in_day) - (hours * seconds_in_hour))) // seconds_in_minute

    # display mean travel time
    print("total travel time: days=",days,"hours=",hours,"min=",minutes)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print("count of user types: \n",df['User Type'].value_counts().to_string())

    if 'Gender' in df:
      # Display counts of gender
      print("count of user gender: \n",df['Gender'].value_counts().to_string())


      # Display earliest, most recent, and most common year of birth
      print("Ealiest year of birth: ",df['Birth Year'].min())
      print("most recent year of birth: ",df['Birth Year'].max())
      print("most common year of birth: ",df['Birth Year'].mode()[0],". Number of occurrences: ",df["Birth Year"].value_counts()[df['Birth Year'].mode()[0]])
    else:
      print("There is no data provided about Gender and Year of Birth.")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_raw_data(df):
  """Displays Raw Data for user."""
  start=0
  display=input("Do you want to see 5 raw data?")
  while display == "yes":
    print(df.iloc[start:start+5,:9])
    start+=5
    display=input("Do you want to display 5 more raw data?")


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)
        restart = input('\nWould you like to restart? Enter yes or no.\n')

        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()